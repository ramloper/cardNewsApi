# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
permissions:
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Get Github Actions IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress \
                --group-id ${{ secrets.AWS_SG_ID }} \
                --protocol tcp \
                --port 22 \
                --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      ## gradlew 실행 권한 부여
      - name: Grant execute permisson for gradelw
        run: chmod +x gradlew

      - name: Build with Gradle (without Test)
        run: ./gradlew clean build -x test --stacktrace

      ##docker hub 로그인
      - name: Docker build & push to repo
        if: contains(github.ref, 'main')
        run: |
          docker login -u "${{ secrets.DOCKER_ID }}" -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t "${{ secrets.DOCKER_ID }}"/artgram ./
          docker push "${{ secrets.DOCKER_ID }}"/artgram:latest

      - name: Deploy to repo
        uses: appleboy/ssh-action@v1.0.3
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}

          script: |
            sudo docker login -u "${{ secrets.DOCKER_ID }}" -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker stop artgram || true
            sudo docker ps --filter 'status=exited' -a -q | xargs -r sudo docker rm -f
            sudo docker pull "${{ secrets.DOCKER_ID }}"/artgram:latest
            sudo docker images
            docker run -d --net artgram \
              --name artgram \
              -p 8080:8080 \
              -e DB_URL="${{secrets.DB_URL}}" \
              -e DB_USERNAME="${{secrets.DB_USERNAME}}" \
              -e DB_PASSWORD="${{secrets.DB_PASSWORD}}" \
              -e REDIS_HOST="${{secrets.REDIS_HOST}}" \
#              -e REDIS_PASSWORD="${{secrets.REDIS_PASSWORD}}" \
              -e JWT_SECRET="${{secrets.JWT_SECRET}}" \
              -e JWT_KEY="${{secrets.JWT_KEY}}" \
              -e MONGO_DB_URI="${{secrets.MONGO_DB_URI}}" \
              -e SPRING_PROFILES_ACTIVE=product \
              -v /etc/localtime:/etc/localtime:ro \
              -e ACCESS_KEY="${{secrets.AWS_ACCESS_KEY_ID}}" \
              -e SECRET_KEY="${{secrets.AWS_SECRET_ACCESS_KEY}}" \
              -e BUCKET="${{secrets.AWS_SECRET_ACCESS_KEY}}" \
              -e TZ=Asia/Seoul \
                kimwooram/artgram:latest
            sudo docker image prune -a -f
      - name: Remove Github Actions IP to Security gruop
        run: |
          aws ec2 revoke-security-group-ingress \
                --group-id ${{ secrets.AWS_SG_ID }} \
                --protocol tcp\
                --port 22 \
                --cidr ${{ steps.ip.outputs.ipv4 }}/32